// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CheckStatus is an object representing the database table.
type CheckStatus struct {
	CheckKey   string      `boil:"check_key" json:"check_key" toml:"check_key" yaml:"check_key"`
	Details    null.JSON   `boil:"details" json:"details,omitempty" toml:"details" yaml:"details,omitempty"`
	Duration   null.Int    `boil:"duration" json:"duration,omitempty" toml:"duration" yaml:"duration,omitempty"`
	Error      null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	InsertedAt time.Time   `boil:"inserted_at" json:"inserted_at" toml:"inserted_at" yaml:"inserted_at"`
	Invalid    null.Bool   `boil:"invalid" json:"invalid,omitempty" toml:"invalid" yaml:"invalid,omitempty"`
	Message    null.String `boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`
	Status     null.Bool   `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Time       time.Time   `boil:"time" json:"time" toml:"time" yaml:"time"`

	R *checkStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckStatusColumns = struct {
	CheckKey   string
	Details    string
	Duration   string
	Error      string
	InsertedAt string
	Invalid    string
	Message    string
	Status     string
	Time       string
}{
	CheckKey:   "check_key",
	Details:    "details",
	Duration:   "duration",
	Error:      "error",
	InsertedAt: "inserted_at",
	Invalid:    "invalid",
	Message:    "message",
	Status:     "status",
	Time:       "time",
}

var CheckStatusTableColumns = struct {
	CheckKey   string
	Details    string
	Duration   string
	Error      string
	InsertedAt string
	Invalid    string
	Message    string
	Status     string
	Time       string
}{
	CheckKey:   "check_statuses.check_key",
	Details:    "check_statuses.details",
	Duration:   "check_statuses.duration",
	Error:      "check_statuses.error",
	InsertedAt: "check_statuses.inserted_at",
	Invalid:    "check_statuses.invalid",
	Message:    "check_statuses.message",
	Status:     "check_statuses.status",
	Time:       "check_statuses.time",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CheckStatusWhere = struct {
	CheckKey   whereHelperstring
	Details    whereHelpernull_JSON
	Duration   whereHelpernull_Int
	Error      whereHelpernull_String
	InsertedAt whereHelpertime_Time
	Invalid    whereHelpernull_Bool
	Message    whereHelpernull_String
	Status     whereHelpernull_Bool
	Time       whereHelpertime_Time
}{
	CheckKey:   whereHelperstring{field: "\"check_statuses\".\"check_key\""},
	Details:    whereHelpernull_JSON{field: "\"check_statuses\".\"details\""},
	Duration:   whereHelpernull_Int{field: "\"check_statuses\".\"duration\""},
	Error:      whereHelpernull_String{field: "\"check_statuses\".\"error\""},
	InsertedAt: whereHelpertime_Time{field: "\"check_statuses\".\"inserted_at\""},
	Invalid:    whereHelpernull_Bool{field: "\"check_statuses\".\"invalid\""},
	Message:    whereHelpernull_String{field: "\"check_statuses\".\"message\""},
	Status:     whereHelpernull_Bool{field: "\"check_statuses\".\"status\""},
	Time:       whereHelpertime_Time{field: "\"check_statuses\".\"time\""},
}

// CheckStatusRels is where relationship names are stored.
var CheckStatusRels = struct {
}{}

// checkStatusR is where relationships are stored.
type checkStatusR struct {
}

// NewStruct creates a new relationship struct
func (*checkStatusR) NewStruct() *checkStatusR {
	return &checkStatusR{}
}

// checkStatusL is where Load methods for each relationship are stored.
type checkStatusL struct{}

var (
	checkStatusAllColumns            = []string{"check_key", "details", "duration", "error", "inserted_at", "invalid", "message", "status", "time"}
	checkStatusColumnsWithoutDefault = []string{"check_key", "details", "duration", "error", "inserted_at", "invalid", "message", "status", "time"}
	checkStatusColumnsWithDefault    = []string{}
	checkStatusPrimaryKeyColumns     = []string{"time", "check_key"}
)

type (
	// CheckStatusSlice is an alias for a slice of pointers to CheckStatus.
	// This should almost always be used instead of []CheckStatus.
	CheckStatusSlice []*CheckStatus
	// CheckStatusHook is the signature for custom CheckStatus hook methods
	CheckStatusHook func(boil.Executor, *CheckStatus) error

	checkStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkStatusType                 = reflect.TypeOf(&CheckStatus{})
	checkStatusMapping              = queries.MakeStructMapping(checkStatusType)
	checkStatusPrimaryKeyMapping, _ = queries.BindMapping(checkStatusType, checkStatusMapping, checkStatusPrimaryKeyColumns)
	checkStatusInsertCacheMut       sync.RWMutex
	checkStatusInsertCache          = make(map[string]insertCache)
	checkStatusUpdateCacheMut       sync.RWMutex
	checkStatusUpdateCache          = make(map[string]updateCache)
	checkStatusUpsertCacheMut       sync.RWMutex
	checkStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var checkStatusBeforeInsertHooks []CheckStatusHook
var checkStatusBeforeUpdateHooks []CheckStatusHook
var checkStatusBeforeDeleteHooks []CheckStatusHook
var checkStatusBeforeUpsertHooks []CheckStatusHook

var checkStatusAfterInsertHooks []CheckStatusHook
var checkStatusAfterSelectHooks []CheckStatusHook
var checkStatusAfterUpdateHooks []CheckStatusHook
var checkStatusAfterDeleteHooks []CheckStatusHook
var checkStatusAfterUpsertHooks []CheckStatusHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CheckStatus) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CheckStatus) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CheckStatus) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CheckStatus) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CheckStatus) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CheckStatus) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CheckStatus) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CheckStatus) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CheckStatus) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range checkStatusAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCheckStatusHook registers your hook function for all future operations.
func AddCheckStatusHook(hookPoint boil.HookPoint, checkStatusHook CheckStatusHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		checkStatusBeforeInsertHooks = append(checkStatusBeforeInsertHooks, checkStatusHook)
	case boil.BeforeUpdateHook:
		checkStatusBeforeUpdateHooks = append(checkStatusBeforeUpdateHooks, checkStatusHook)
	case boil.BeforeDeleteHook:
		checkStatusBeforeDeleteHooks = append(checkStatusBeforeDeleteHooks, checkStatusHook)
	case boil.BeforeUpsertHook:
		checkStatusBeforeUpsertHooks = append(checkStatusBeforeUpsertHooks, checkStatusHook)
	case boil.AfterInsertHook:
		checkStatusAfterInsertHooks = append(checkStatusAfterInsertHooks, checkStatusHook)
	case boil.AfterSelectHook:
		checkStatusAfterSelectHooks = append(checkStatusAfterSelectHooks, checkStatusHook)
	case boil.AfterUpdateHook:
		checkStatusAfterUpdateHooks = append(checkStatusAfterUpdateHooks, checkStatusHook)
	case boil.AfterDeleteHook:
		checkStatusAfterDeleteHooks = append(checkStatusAfterDeleteHooks, checkStatusHook)
	case boil.AfterUpsertHook:
		checkStatusAfterUpsertHooks = append(checkStatusAfterUpsertHooks, checkStatusHook)
	}
}

// OneG returns a single checkStatus record from the query using the global executor.
func (q checkStatusQuery) OneG() (*CheckStatus, error) {
	return q.One(boil.GetDB())
}

// One returns a single checkStatus record from the query.
func (q checkStatusQuery) One(exec boil.Executor) (*CheckStatus, error) {
	o := &CheckStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for check_statuses")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CheckStatus records from the query using the global executor.
func (q checkStatusQuery) AllG() (CheckStatusSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all CheckStatus records from the query.
func (q checkStatusQuery) All(exec boil.Executor) (CheckStatusSlice, error) {
	var o []*CheckStatus

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CheckStatus slice")
	}

	if len(checkStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CheckStatus records in the query, and panics on error.
func (q checkStatusQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all CheckStatus records in the query.
func (q checkStatusQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count check_statuses rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q checkStatusQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q checkStatusQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if check_statuses exists")
	}

	return count > 0, nil
}

// CheckStatuses retrieves all the records using an executor.
func CheckStatuses(mods ...qm.QueryMod) checkStatusQuery {
	mods = append(mods, qm.From("\"check_statuses\""))
	return checkStatusQuery{NewQuery(mods...)}
}

// FindCheckStatusG retrieves a single record by ID.
func FindCheckStatusG(time time.Time, checkKey string, selectCols ...string) (*CheckStatus, error) {
	return FindCheckStatus(boil.GetDB(), time, checkKey, selectCols...)
}

// FindCheckStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckStatus(exec boil.Executor, time time.Time, checkKey string, selectCols ...string) (*CheckStatus, error) {
	checkStatusObj := &CheckStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"check_statuses\" where \"time\"=$1 AND \"check_key\"=$2", sel,
	)

	q := queries.Raw(query, time, checkKey)

	err := q.Bind(nil, exec, checkStatusObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from check_statuses")
	}

	if err = checkStatusObj.doAfterSelectHooks(exec); err != nil {
		return checkStatusObj, err
	}

	return checkStatusObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CheckStatus) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CheckStatus) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no check_statuses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkStatusInsertCacheMut.RLock()
	cache, cached := checkStatusInsertCache[key]
	checkStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkStatusAllColumns,
			checkStatusColumnsWithDefault,
			checkStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkStatusType, checkStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkStatusType, checkStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"check_statuses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"check_statuses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into check_statuses")
	}

	if !cached {
		checkStatusInsertCacheMut.Lock()
		checkStatusInsertCache[key] = cache
		checkStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single CheckStatus record using the global executor.
// See Update for more documentation.
func (o *CheckStatus) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the CheckStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CheckStatus) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	checkStatusUpdateCacheMut.RLock()
	cache, cached := checkStatusUpdateCache[key]
	checkStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkStatusAllColumns,
			checkStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update check_statuses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"check_statuses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkStatusType, checkStatusMapping, append(wl, checkStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update check_statuses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for check_statuses")
	}

	if !cached {
		checkStatusUpdateCacheMut.Lock()
		checkStatusUpdateCache[key] = cache
		checkStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q checkStatusQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q checkStatusQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for check_statuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for check_statuses")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CheckStatusSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckStatusSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"check_statuses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkStatusPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in checkStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all checkStatus")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CheckStatus) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CheckStatus) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no check_statuses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkStatusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkStatusUpsertCacheMut.RLock()
	cache, cached := checkStatusUpsertCache[key]
	checkStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			checkStatusAllColumns,
			checkStatusColumnsWithDefault,
			checkStatusColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			checkStatusAllColumns,
			checkStatusPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert check_statuses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(checkStatusPrimaryKeyColumns))
			copy(conflict, checkStatusPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"check_statuses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(checkStatusType, checkStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkStatusType, checkStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert check_statuses")
	}

	if !cached {
		checkStatusUpsertCacheMut.Lock()
		checkStatusUpsertCache[key] = cache
		checkStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single CheckStatus record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CheckStatus) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single CheckStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CheckStatus) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CheckStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkStatusPrimaryKeyMapping)
	sql := "DELETE FROM \"check_statuses\" WHERE \"time\"=$1 AND \"check_key\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from check_statuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for check_statuses")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q checkStatusQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q checkStatusQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no checkStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from check_statuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for check_statuses")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CheckStatusSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckStatusSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(checkStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"check_statuses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkStatusPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for check_statuses")
	}

	if len(checkStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CheckStatus) ReloadG() error {
	if o == nil {
		return errors.New("models: no CheckStatus provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CheckStatus) Reload(exec boil.Executor) error {
	ret, err := FindCheckStatus(exec, o.Time, o.CheckKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckStatusSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CheckStatusSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckStatusSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"check_statuses\".* FROM \"check_statuses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CheckStatusSlice")
	}

	*o = slice

	return nil
}

// CheckStatusExistsG checks if the CheckStatus row exists.
func CheckStatusExistsG(time time.Time, checkKey string) (bool, error) {
	return CheckStatusExists(boil.GetDB(), time, checkKey)
}

// CheckStatusExists checks if the CheckStatus row exists.
func CheckStatusExists(exec boil.Executor, time time.Time, checkKey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"check_statuses\" where \"time\"=$1 AND \"check_key\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, time, checkKey)
	}
	row := exec.QueryRow(sql, time, checkKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if check_statuses exists")
	}

	return exists, nil
}
